{"version":3,"sources":["OverallUsStatusDonutChart.js","DailyUsStatusLineChart.js","PerStateStatusDonutChart.js","PerStateDailyStatusLineChart.js","StateDropdown.js","App.js","serviceWorker.js","index.js"],"names":["MyChart","useState","data","setData","dataLoaded","setDataLoaded","useEffect","ignore","a","axios","result","fetchData","labels","datasets","label","positive","negative","pending","death","backgroundColor","borderColor","borderWidth","thisRegression","setThisRegression","sort","sortDataEach","thisData","filter","item","date","map","index","console","log","regression","exponential","thisThisRegression","b","Math","floor","spanGaps","lineTension","round","equation","r2","props","state","id","value","selectedState","onChange","event","setSelectedState","target","Set","App","className","StateDropdown","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wOAsEeA,MA/Df,WAAoB,IAAD,EAGOC,mBAAS,CAAC,KAHjB,mBAGVC,EAHU,KAGJC,EAHI,OAImBF,oBAAS,GAJ5B,mBAIVG,EAJU,KAIEC,EAJF,KAoBjB,OAfAC,qBAAU,WACR,IAAIC,GAAS,EADC,4CAEd,4BAAAC,EAAA,0DACMD,EADN,iEAEuBE,IAAM,oCAF7B,OAEQC,EAFR,OAGOH,GAAQJ,EAAQO,EAAOR,MACvBK,GAAQF,GAAc,GAJ7B,4CAFc,sBASd,OATc,mCAQdM,GACO,WAAQJ,GAAS,KAExB,IAKJ,6BACA,iDAEsB,IAAbH,EACC,kBAAC,IAAD,CAEDF,KAAM,CACHU,OAAQ,CAAC,WAAY,WAAY,UAAW,UAC5CC,SAAU,CAAC,CACPC,MAAO,aACPZ,KAAM,CACJA,EAAK,GAAGa,SACRb,EAAK,GAAGc,SACRd,EAAK,GAAGe,QACRf,EAAK,GAAGgB,OAEVC,gBAAiB,CACb,0BACA,0BACA,0BACA,0BACA,2BACA,2BAEJC,YAAa,CACT,wBACA,wBACA,wBACA,wBACA,yBACA,yBAEJC,YAAa,OAGnB,2C,iBCqFKrB,MA5If,WAAoB,IAAD,EAC2BC,mBAAS,MADpC,mBACVqB,EADU,KACMC,EADN,OAEOtB,mBAAS,CAAC,KAFjB,mBAEVC,EAFU,KAEJC,EAFI,OAGmBF,oBAAS,GAH5B,mBAGVG,EAHU,KAGEC,EAHF,KAIjBC,qBAAU,WACR,IAAIC,GAAS,EADC,4CAEd,gCAAAC,EAAA,0DACMD,EADN,iEAGuBE,IAAM,0CAH7B,UAGQC,EAHR,OAKOH,GAAQJ,EAAQO,EAAOR,KAAKsB,KAAKC,IACjClB,GAAQF,GAAc,GACtBE,EAPP,wBASUmB,EAAWhB,EAAOR,KAAKyB,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAO,YAAUC,KAAI,SAACF,EAAKG,GAAN,MAAgB,CAACA,EAAyB,OAAlBH,EAAKb,SAAoB,EAAIa,EAAKb,aAChIiB,QAAQC,IAAIP,GAVhB,UAWqCQ,IAAWC,YAAYT,GAX5D,QAWUU,EAXV,OAYIb,EAAkBa,GAZtB,6CAFc,sBAkBd,OAlBc,mCAiBdzB,GACO,WAAQJ,GAAS,KAExB,IAGF,IAAMkB,EAAe,SAACjB,EAAE6B,GACtB,OAAI7B,EAAEqB,KAAOQ,EAAER,KACN,GAED,GAKV,OACF,6BACA,+CAEsB,IAAbzB,EACC,kBAAC,IAAD,CAAMF,KAAM,CACZU,OAAQV,EAAK4B,KAAI,SAAAF,GAAI,OAASU,KAAKC,MAAMX,EAAKC,KAAK,KAAS,IAAMS,KAAKC,MAAMX,EAAKC,KAAK,KAAO,IAAO,IAAMD,EAAKC,KAAO,OACvHW,UAAU,EACV3B,SAAU,CAOV,CACE2B,UAAU,EAEZ1B,MAAO,cACPZ,KAAMA,EAAK4B,KAAI,SAACF,EAAKG,GACnB,OAAsB,OAAfH,EAAKV,MAAiB,EAAIU,EAAKV,SAExCC,gBAAiB,0BACjBC,YAAa,wBACbC,YAAa,GAEb,CACEoB,YAAa,EACbD,UAAU,EAEZ1B,MAAO,eACPZ,KAAMA,EAAK4B,KAAI,SAACF,EAAKG,GACnB,OAAOH,EAAKX,WAEdE,gBAAiB,0BACjBC,YAAa,wBACbC,YAAa,GAEf,CACEoB,YAAa,EACbD,UAAU,EAEZ1B,MAAO,gBACPZ,KAAMA,EAAK4B,KAAI,SAACF,EAAKG,GACnB,OAAOH,EAAKb,YAEdI,gBAAiB,0BACjBC,YAAa,wBACbC,YAAa,GAEf,CACEoB,YAAa,EACbD,UAAU,EAEZ1B,MAAO,gBACPZ,KAAMA,EAAK4B,KAAI,SAACF,EAAKG,GACnB,OAAOH,EAAKZ,YAEdG,gBAAiB,0BACjBC,YAAa,wBACbC,YAAa,OAmCT,yCAEV,6BACyB,OAAjBC,EAAyB,yCAAoB,oFAA0DgB,KAAKI,MAAM,IAAKJ,KAAKL,IAAI,GAAGX,EAAeqB,SAAS,IAAI,IAAlH,aAAiIrB,EAAesB,GAAhJ,QCxEtC5C,MA/Df,SAAiB6C,GAAQ,IAAD,EAGE5C,mBAAS,CAAC,KAHZ,mBAGfC,EAHe,KAGTC,EAHS,OAIcF,oBAAS,GAJvB,mBAIfG,EAJe,KAIHC,EAJG,KAoBtB,OAfAC,qBAAU,WACR,IAAIC,GAAS,EADC,4CAEd,4BAAAC,EAAA,0DACMD,EADN,iEAEuBE,IAAM,wCAF7B,OAEQC,EAFR,OAGOH,GAAQJ,EAAQO,EAAOR,KAAKyB,QAAO,SAAAC,GAAI,OAAIA,EAAKkB,QAAUD,EAAMC,UAChEvC,GAAQF,GAAc,GAJ7B,4CAFc,sBASd,OATc,mCAQdM,GACO,WAAQJ,GAAS,KAExB,CAACsC,IAKL,6BACA,+CAAqBA,EAAMC,QAEL,IAAb1C,EACC,kBAAC,IAAD,CAEDF,KAAM,CACHU,OAAQ,CAAC,WAAY,WAAY,UAAW,UAC5CC,SAAU,CAAC,CACPC,MAAO,aACPZ,KAAM,CACJA,EAAK,GAAGa,SACRb,EAAK,GAAGc,SACRd,EAAK,GAAGe,QACRf,EAAK,GAAGgB,OAEVC,gBAAiB,CACb,0BACA,0BACA,0BACA,0BACA,2BACA,2BAEJC,YAAa,CACT,wBACA,wBACA,wBACA,wBACA,yBACA,yBAEJC,YAAa,OAGnB,2CC6FKrB,MArJf,SAAiB6C,GAAQ,IAAD,EACsB5C,mBAAS,MAD/B,mBACfqB,EADe,KACCC,EADD,OAEEtB,mBAAS,CAAC,KAFZ,mBAEfC,EAFe,KAETC,EAFS,OAGcF,oBAAS,GAHvB,mBAGfG,EAHe,KAGHC,EAHG,KAItBC,qBAAU,WACR,IAAIC,GAAS,EADC,4CAEd,gCAAAC,EAAA,0DACMD,EADN,iEAEuBE,IAAM,8CAF7B,UAEQC,EAFR,OAGOH,GAAQJ,EAAQO,EAAOR,KAAKyB,QAAO,SAAAC,GAAI,OAAIA,EAAKkB,QAAUD,EAAMC,SAAOtB,KAAKC,IAC5ElB,GAAQF,GAAc,GACtBE,EALP,wBAMUmB,EAAWhB,EAAOR,KAAKyB,QAAO,SAAAC,GAAI,OAAIA,EAAKkB,QAAUD,EAAMC,OAA0B,GAAjBlB,EAAKb,YAAeY,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAO,YAAUL,KAAKC,GAAcK,KAAI,SAACF,EAAKG,GAAN,MAAgB,CAACA,EAAyB,OAAlBH,EAAKb,SAAoB,EAAIa,EAAKb,aANxN,UAOqCmB,IAAWC,YAAYT,GAP5D,QAOUU,EAPV,OAQIJ,QAAQC,IAAI,SAAUP,GACtBM,QAAQC,IAAI,eAAgBG,GAC5Bb,EAAkBa,GAVtB,6CAFc,sBAgBd,OAhBc,mCAedzB,GACO,WAAQJ,GAAS,KAExB,CAACsC,IAEH,IAAMpB,EAAe,SAACjB,EAAE6B,GACtB,OAAI7B,EAAEqB,KAAOQ,EAAER,KACN,GAED,GAGV,OACF,6BACA,6CAAmBgB,EAAMC,QAEH,IAAb1C,EACC,kBAAC,IAAD,CAAMF,KAAM,CACZU,OAAQV,EAAK4B,KAAI,SAAAF,GAAI,OAASU,KAAKC,MAAMX,EAAKC,KAAK,KAAS,IAAMS,KAAKC,MAAMX,EAAKC,KAAK,KAAO,IAAO,IAAMD,EAAKC,KAAO,OACvHW,UAAU,EACV3B,SAAU,CAoBV,CACE2B,UAAU,EAEZ1B,MAAO,cACPZ,KAAMA,EAAK4B,KAAI,SAACF,EAAKG,GACnB,OAAsB,OAAfH,EAAKV,MAAiB,EAAIU,EAAKV,SAExCC,gBAAiB,0BACjBC,YAAa,wBACbC,YAAa,GAEb,CACEoB,YAAa,EACbD,UAAU,EAEZ1B,MAAO,eACPZ,KAAMA,EAAK4B,KAAI,SAACF,EAAKG,GACnB,OAAwB,OAAjBH,EAAKX,QAAmB,EAAIW,EAAKX,WAE1CE,gBAAiB,0BACjBC,YAAa,wBACbC,YAAa,GAEf,CACEoB,YAAa,EACbD,UAAU,EAEZ1B,MAAO,gBACPZ,KAAMA,EAAK4B,KAAI,SAACF,EAAKG,GACnB,OAAyB,OAAlBH,EAAKb,SAAoB,EAAIa,EAAKb,YAE3CI,gBAAiB,0BACjBC,YAAa,wBACbC,YAAa,GAEf,CACEoB,YAAa,EACbD,UAAU,EAEZ1B,MAAO,gBACPZ,KAAMA,EAAK4B,KAAI,SAACF,EAAKG,GACnB,OAAyB,OAAlBH,EAAKZ,SAAoB,EAAIY,EAAKZ,YAE3CG,gBAAiB,0BACjBC,YAAa,wBACbC,YAAa,OAmCT,yCAEJ,6BACyB,OAAjBC,EAAyB,yCAAoB,oFAA0DgB,KAAKI,MAAM,IAAKJ,KAAKL,IAAI,GAAGX,EAAeqB,SAAS,IAAI,IAAlH,aAAiIrB,EAAesB,GAAhJ,Q,QClG5C5C,MA5Cf,SAAiB6C,GAAQ,IAAD,EAGE5C,mBAAS,CAAC,KAHZ,mBAGfC,EAHe,KAGTC,EAHS,OAIcF,oBAAS,GAJvB,mBAIfG,EAJe,KAIHC,EAJG,KAuBtB,OAlBAC,qBAAU,WACR,IAAIC,GAAS,EADC,4CAEd,4BAAAC,EAAA,0DACMD,EADN,iEAEuBE,IAAM,8CAF7B,OAEQC,EAFR,OAIOH,GAAQJ,EAAQO,EAAOR,MACvBK,GAAQF,GAAc,GAL7B,4CAFc,sBAUd,OAVc,mCASdM,GACO,WAAQJ,GAAS,KAExB,IAOA,8BAEY,IAAfH,EACC,yCACA,yCAAc,4BAAQ2C,GAAG,SAASC,MAAOH,EAAMI,cAAeC,SATzC,SAACC,GACpBN,EAAMO,iBAAiBD,EAAME,OAAOL,SAUtC,CACE,IADF,mBAEK,IAAIM,IACLpD,EAAK4B,KAAI,SAAAF,GAAI,OAAIA,EAAKkB,YAExBhB,KACA,SAAAF,GAAI,OAAG,4BAAQoB,MAAOpB,GAAc,KAAPA,EAAU,WAAWA,UCCvC2B,MA/Bf,WAAgB,IAAD,EAC4BtD,mBAAS,IADrC,mBACNgD,EADM,KACQG,EADR,KAGb,OACE,yBAAKI,UAAU,OAEb,4BAAQA,UAAU,cAElB,8DACA,kBAACC,EAAD,CAAeR,cAAeA,EAAeG,iBAAkBA,IAE3C,KAAlBH,EAEF,yBAAKO,UAAU,wBAErB,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEA,yBAAKA,UAAU,wBAEf,kBAAC,EAAD,CAAiBV,MAAOG,IACxB,kBAAC,EAAD,CAAeH,MAAOG,QCtBhBS,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3B,QACfqB,UAAUC,cAAcQ,YAI1B5C,QAAQC,IACN,iHAKEiC,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBvC,QAAQC,IAAI,sCAGRiC,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAAAC,GACLhD,QAAQgD,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,GAAwB1B,OAAOC,SAAS0B,MACpDC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,GAAN,sBAEP5B,IAgEV,SAAiCO,EAAOC,GAEtCwB,MAAMzB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BrB,MAAK,SAAAsB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BV,OAAOC,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACL/C,QAAQC,IACN,oEAvFAmE,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjCtC,QAAQC,IACN,iHAMJ+B,EAAgBC,EAAOC,OCvC/BE,I","file":"static/js/main.7ff2cd7c.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport { Doughnut, } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nfunction MyChart() {\r\n\r\n\r\n  const [data, setData] = useState([{}]);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  useEffect(() => {\r\n    let ignore = false;\r\n    async function fetchData() {\r\n      if (ignore) return\r\n      const result = await axios('https://covidtracking.com/api/us');\r\n      if (!ignore) setData(result.data);\r\n      if (!ignore) setDataLoaded(true);\r\n    }\r\n    fetchData();\r\n    return () => { ignore = true; }\r\n\r\n  },[]);\r\n\r\n\r\n\r\n  return (\r\n<div>\r\n<h2>Current Testing </h2>\r\n      {\r\n        (dataLoaded===true)\r\n        ? <Doughnut\r\n\r\n         data={{\r\n            labels: ['Positive', 'Negative', 'Pending', 'Deaths'],\r\n            datasets: [{\r\n                label: '# of Tests',\r\n                data: [\r\n                  data[0].positive,\r\n                  data[0].negative,\r\n                  data[0].pending,\r\n                  data[0].death,\r\n                ],\r\n                backgroundColor: [\r\n                    'rgba(255, 99, 132, 0.8)',\r\n                    'rgba(54, 162, 235, 0.8)',\r\n                    'rgba(255, 206, 86, 0.8)',\r\n                    'rgba(75, 192, 192, 0.8)',\r\n                    'rgba(153, 102, 255, 0.8)',\r\n                    'rgba(255, 159, 64, 0.8)'\r\n                ],\r\n                borderColor: [\r\n                    'rgba(255, 99, 132, 1)',\r\n                    'rgba(54, 162, 235, 1)',\r\n                    'rgba(255, 206, 86, 1)',\r\n                    'rgba(75, 192, 192, 1)',\r\n                    'rgba(153, 102, 255, 1)',\r\n                    'rgba(255, 159, 64, 1)'\r\n                ],\r\n                borderWidth: 1\r\n            }]\r\n        }}/>\r\n        : <p>Loading...</p>\r\n      }\r\n\r\n</div>\r\n  );\r\n}\r\n\r\nexport default MyChart;\r\n","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport { Doughnut, Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport regression from 'regression';\r\n\r\n\r\n\r\nfunction MyChart() {\r\n  const [thisRegression, setThisRegression] = useState(null);\r\n  const [data, setData] = useState([{}]);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  useEffect(() => {\r\n    let ignore = false;\r\n    async function fetchData() {\r\n      if (ignore) return\r\n      // const result = await axios('https://covidtracking.com/api/us');\r\n      const result = await axios('https://covidtracking.com/api/us/daily');\r\n\r\n      if (!ignore) setData(result.data.sort(sortDataEach));\r\n      if (!ignore) setDataLoaded(true);\r\n      if (!ignore) {\r\n\r\n        const thisData = result.data.filter(item => item.date > 20200601).map((item,index) => [index, item.positive === null ? 0 : item.positive]);\r\n        console.log(thisData)\r\n        const thisThisRegression = await regression.exponential(thisData);\r\n        setThisRegression(thisThisRegression)\r\n      }\r\n    }\r\n    fetchData();\r\n    return () => { ignore = true; }\r\n\r\n  },[]);\r\n\r\n  \r\n  const sortDataEach = (a,b) => {\r\n    if (a.date > b.date) {\r\n      return 1;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  \r\n\r\n  return (\r\n<div>\r\n<h2>Daily Testing </h2>\r\n      {\r\n        (dataLoaded===true)\r\n        ? <Line data={{\r\n          labels: data.map(item => \"\" + Math.floor(item.date/10000) + \"-\" + Math.floor(item.date/100) % 1000 + \"-\" + item.date % 100),\r\n          spanGaps: true,\r\n          datasets: [\r\n\r\n            // 'rgba(255, 99, 132, 0.8)',\r\n            // 'rgba(54, 162, 235, 0.8)',\r\n            // 'rgba(255, 206, 86, 0.8)',\r\n            // 'rgba(75, 192, 192, 0.8)',\r\n\r\n          {\r\n            spanGaps: true,\r\n\r\n          label: '# of Deaths',\r\n          data: data.map((item,index) => {\r\n            return item.death === null ? 0 : item.death\r\n          }),\r\n          backgroundColor: 'rgba(75, 192, 192, 0.8)',\r\n          borderColor: 'rgba(75, 192, 192, 1)',\r\n          borderWidth: 1\r\n        },\r\n          {\r\n            lineTension: 0,\r\n            spanGaps: true,\r\n\r\n          label: '# of Pending',\r\n          data: data.map((item,index) => {\r\n            return item.pending\r\n          }),\r\n          backgroundColor: 'rgba(255, 206, 86, 0.8)',\r\n          borderColor: 'rgba(255, 206, 86, 1)',\r\n          borderWidth: 1\r\n        },\r\n        {\r\n          lineTension: 0,\r\n          spanGaps: true,\r\n\r\n        label: '# of Positive',\r\n        data: data.map((item,index) => {\r\n          return item.positive\r\n        }),\r\n        backgroundColor: 'rgba(255, 99, 132, 0.8)',\r\n        borderColor: 'rgba(255, 99, 132, 1)',\r\n        borderWidth: 1\r\n      },\r\n      {\r\n        lineTension: 0,\r\n        spanGaps: true,\r\n\r\n      label: '# of Negative',\r\n      data: data.map((item,index) => {\r\n        return item.negative\r\n      }),\r\n      backgroundColor: 'rgba(54, 162, 235, 0.8)',\r\n      borderColor: 'rgba(54, 162, 235, 1)',\r\n      borderWidth: 1\r\n    },\r\n\r\n        ]\r\n\r\n        }}/>\r\n        // <Doughnut data={{\r\n        //     labels: ['Positive', 'Negative', 'Pending', 'Dead'],\r\n        //     datasets: [{\r\n        //         label: '# of Tests',\r\n        //         data: [\r\n        //           data[0].positive,\r\n        //           data[0].negative,\r\n        //           data[0].pending,\r\n        //           data[0].death,\r\n        //         ],\r\n        //         backgroundColor: [\r\n        //             'rgba(255, 99, 132, 0.8)',\r\n        //             'rgba(54, 162, 235, 0.8)',\r\n        //             'rgba(255, 206, 86, 0.8)',\r\n        //             'rgba(75, 192, 192, 0.8)',\r\n        //             'rgba(153, 102, 255, 0.8)',\r\n        //             'rgba(255, 159, 64, 0.8)'\r\n        //         ],\r\n        //         borderColor: [\r\n        //             'rgba(255, 99, 132, 1)',\r\n        //             'rgba(54, 162, 235, 1)',\r\n        //             'rgba(255, 206, 86, 1)',\r\n        //             'rgba(75, 192, 192, 1)',\r\n        //             'rgba(153, 102, 255, 1)',\r\n        //             'rgba(255, 159, 64, 1)'\r\n        //         ],\r\n        //         borderWidth: 1\r\n        //     }]\r\n        // }}/>\r\n        : <p>Loading...</p>\r\n      }\r\n<div>\r\n    {  (thisRegression===null) ? <p>Loading...</p> : <h3>Approximate \"Positive\" Doubling Time (Since June 1): {Math.round(100* Math.log(2)/thisRegression.equation[1])/100} days (r2={thisRegression.r2})</h3> }\r\n</div>\r\n</div>\r\n  );\r\n}\r\n\r\nexport default MyChart;\r\n","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport { Doughnut, } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nfunction MyChart(props) {\r\n\r\n\r\n  const [data, setData] = useState([{}]);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  useEffect(() => {\r\n    let ignore = false;\r\n    async function fetchData() {\r\n      if (ignore) return\r\n      const result = await axios('https://covidtracking.com/api/states');\r\n      if (!ignore) setData(result.data.filter(item => item.state === props.state));\r\n      if (!ignore) setDataLoaded(true);\r\n    }\r\n    fetchData();\r\n    return () => { ignore = true; }\r\n\r\n  },[props]);\r\n\r\n\r\n\r\n  return (\r\n<div>\r\n<h2>Current Testing {props.state}</h2>\r\n      {\r\n        (dataLoaded===true)\r\n        ? <Doughnut\r\n\r\n         data={{\r\n            labels: ['Positive', 'Negative', 'Pending', 'Deaths'],\r\n            datasets: [{\r\n                label: '# of Tests',\r\n                data: [\r\n                  data[0].positive,\r\n                  data[0].negative,\r\n                  data[0].pending,\r\n                  data[0].death,\r\n                ],\r\n                backgroundColor: [\r\n                    'rgba(255, 99, 132, 0.8)',\r\n                    'rgba(54, 162, 235, 0.8)',\r\n                    'rgba(255, 206, 86, 0.8)',\r\n                    'rgba(75, 192, 192, 0.8)',\r\n                    'rgba(153, 102, 255, 0.8)',\r\n                    'rgba(255, 159, 64, 0.8)'\r\n                ],\r\n                borderColor: [\r\n                    'rgba(255, 99, 132, 1)',\r\n                    'rgba(54, 162, 235, 1)',\r\n                    'rgba(255, 206, 86, 1)',\r\n                    'rgba(75, 192, 192, 1)',\r\n                    'rgba(153, 102, 255, 1)',\r\n                    'rgba(255, 159, 64, 1)'\r\n                ],\r\n                borderWidth: 1\r\n            }]\r\n        }}/>\r\n        : <p>Loading...</p>\r\n      }\r\n\r\n</div>\r\n  );\r\n}\r\n\r\nexport default MyChart;\r\n","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport { Doughnut, Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport regression from 'regression';\r\n\r\n\r\nfunction MyChart(props) {\r\n  const [thisRegression, setThisRegression] = useState(null);\r\n  const [data, setData] = useState([{}]);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  useEffect(() => {\r\n    let ignore = false;\r\n    async function fetchData() {\r\n      if (ignore) return\r\n      const result = await axios('https://covidtracking.com/api/states/daily');\r\n      if (!ignore) setData(result.data.filter(item => item.state === props.state).sort(sortDataEach));\r\n      if (!ignore) setDataLoaded(true);\r\n      if (!ignore) {\r\n        const thisData = result.data.filter(item => item.state === props.state && item.positive != 0).filter(item => item.date > 20200601).sort(sortDataEach).map((item,index) => [index, item.positive === null ? 0 : item.positive]);\r\n        const thisThisRegression = await regression.exponential(thisData);\r\n        console.log(\"data: \", thisData);\r\n        console.log(\"regression: \", thisThisRegression);\r\n        setThisRegression(thisThisRegression)\r\n      }\r\n    }\r\n    fetchData();\r\n    return () => { ignore = true; }\r\n\r\n  },[props]);\r\n\r\n  const sortDataEach = (a,b) => {\r\n    if (a.date > b.date) {\r\n      return 1;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  return (\r\n<div>\r\n<h2>Daily Testing {props.state}</h2>\r\n      {\r\n        (dataLoaded===true)\r\n        ? <Line data={{\r\n          labels: data.map(item => \"\" + Math.floor(item.date/10000) + \"-\" + Math.floor(item.date/100) % 1000 + \"-\" + item.date % 100),\r\n          spanGaps: true,\r\n          datasets: [\r\n\r\n            // 'rgba(255, 99, 132, 0.8)',\r\n            // 'rgba(54, 162, 235, 0.8)',\r\n            // 'rgba(255, 206, 86, 0.8)',\r\n            // 'rgba(75, 192, 192, 0.8)',\r\n\r\n          //   {\r\n          //     lineTension: 0,\r\n          //     spanGaps: true,\r\n          //\r\n          //   label: '# of States',\r\n          //   data: data.map((item,index) => {\r\n          //     console.log(index,\": \",item)\r\n          //     return item.states\r\n          //   }),\r\n          //   backgroundColor: 'rgba(54, 162, 235, 0.8)',\r\n          //   borderColor: 'rgba(54, 162, 235, 1)',\r\n          //   borderWidth: 1\r\n          // },\r\n          {\r\n            spanGaps: true,\r\n\r\n          label: '# of Deaths',\r\n          data: data.map((item,index) => {\r\n            return item.death === null ? 0 : item.death\r\n          }),\r\n          backgroundColor: 'rgba(75, 192, 192, 0.8)',\r\n          borderColor: 'rgba(75, 192, 192, 1)',\r\n          borderWidth: 1\r\n        },\r\n          {\r\n            lineTension: 0,\r\n            spanGaps: true,\r\n\r\n          label: '# of Pending',\r\n          data: data.map((item,index) => {\r\n            return item.pending === null ? 0 : item.pending\r\n          }),\r\n          backgroundColor: 'rgba(255, 206, 86, 0.8)',\r\n          borderColor: 'rgba(255, 206, 86, 1)',\r\n          borderWidth: 1\r\n        },\r\n        {\r\n          lineTension: 0,\r\n          spanGaps: true,\r\n\r\n        label: '# of Positive',\r\n        data: data.map((item,index) => {\r\n          return item.positive === null ? 0 : item.positive\r\n        }),\r\n        backgroundColor: 'rgba(255, 99, 132, 0.8)',\r\n        borderColor: 'rgba(255, 99, 132, 1)',\r\n        borderWidth: 1\r\n      },\r\n      {\r\n        lineTension: 0,\r\n        spanGaps: true,\r\n\r\n      label: '# of Negative',\r\n      data: data.map((item,index) => {\r\n        return item.negative === null ? 0 : item.negative\r\n      }),\r\n      backgroundColor: 'rgba(54, 162, 235, 0.8)',\r\n      borderColor: 'rgba(54, 162, 235, 1)',\r\n      borderWidth: 1\r\n    },\r\n\r\n        ]\r\n\r\n        }}/>\r\n        // <Doughnut data={{\r\n        //     labels: ['Positive', 'Negative', 'Pending', 'Dead'],\r\n        //     datasets: [{\r\n        //         label: '# of Tests',\r\n        //         data: [\r\n        //           data[0].positive,\r\n        //           data[0].negative,\r\n        //           data[0].pending,\r\n        //           data[0].death,\r\n        //         ],\r\n        //         backgroundColor: [\r\n        //             'rgba(255, 99, 132, 0.8)',\r\n        //             'rgba(54, 162, 235, 0.8)',\r\n        //             'rgba(255, 206, 86, 0.8)',\r\n        //             'rgba(75, 192, 192, 0.8)',\r\n        //             'rgba(153, 102, 255, 0.8)',\r\n        //             'rgba(255, 159, 64, 0.8)'\r\n        //         ],\r\n        //         borderColor: [\r\n        //             'rgba(255, 99, 132, 1)',\r\n        //             'rgba(54, 162, 235, 1)',\r\n        //             'rgba(255, 206, 86, 1)',\r\n        //             'rgba(75, 192, 192, 1)',\r\n        //             'rgba(153, 102, 255, 1)',\r\n        //             'rgba(255, 159, 64, 1)'\r\n        //         ],\r\n        //         borderWidth: 1\r\n        //     }]\r\n        // }}/>\r\n        : <p>Loading...</p>\r\n      }\r\n      <div>\r\n          {  (thisRegression===null) ? <p>Loading...</p> : <h3>Approximate \"Positive\" Doubling Time (Since June 1): {Math.round(100* Math.log(2)/thisRegression.equation[1])/100} days (r2={thisRegression.r2})</h3> }\r\n      </div>\r\n\r\n</div>\r\n  );\r\n}\r\n\r\nexport default MyChart;\r\n","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport { Doughnut, } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nfunction MyChart(props) {\r\n\r\n\r\n  const [data, setData] = useState([{}]);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  useEffect(() => {\r\n    let ignore = false;\r\n    async function fetchData() {\r\n      if (ignore) return\r\n      const result = await axios('https://covidtracking.com/api/states/daily');\r\n      // console.log(result);\r\n      if (!ignore) setData(result.data);\r\n      if (!ignore) setDataLoaded(true);\r\n    }\r\n    fetchData();\r\n    return () => { ignore = true; }\r\n\r\n  },[]);\r\n\r\n  const handleChange = (event) => {\r\n    props.setSelectedState(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n    {\r\n(dataLoaded === false)\r\n? <p>Loading...</p>\r\n: <label>State: <select id=\"states\" value={props.selectedState} onChange={handleChange}>\r\n{\r\n  [\r\n    '',\r\n    ...new Set(\r\n      data.map(item => item.state)\r\n    )\r\n  ].map(\r\n    item =><option value={item}>{item===''?'--None--':item}</option> )\r\n}\r\n</select></label>\r\n}\r\n</div>\r\n  );\r\n}\r\n\r\nexport default MyChart;\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport { Doughnut, } from 'react-chartjs-2';\r\nimport OverallUsChart from './OverallUsStatusDonutChart';\r\nimport DailyUsChart from './DailyUsStatusLineChart';\r\nimport PerStateOverall from './PerStateStatusDonutChart';\r\nimport PerStateDaily from './PerStateDailyStatusLineChart';\r\nimport StateDropdown from './StateDropdown';\r\n\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  const [selectedState,setSelectedState] = useState('');\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <header className=\"App-header\">\r\n\r\n      <h1>COVID-19 US Testing Statistics</h1>\r\n      <StateDropdown selectedState={selectedState} setSelectedState={setSelectedState}/>\r\n      {\r\n        selectedState === '' ?\r\n\r\n      <div className=\"Main-chart-container\">\r\n\r\n<OverallUsChart/>\r\n<DailyUsChart/>\r\n</div> :\r\n<div className=\"Main-chart-container\">\r\n\r\n<PerStateOverall state={selectedState}/>\r\n<PerStateDaily state={selectedState}/>\r\n\r\n</div>\r\n}\r\n      </header>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}